<?xml version="1.0" encoding="UTF-8"?>
<web-app>
	
	<display-name>Klink</display-name>

	<context-param>
		<param-name>reloadable</param-name>
		<param-value>false</param-value>
	</context-param>

	<!--
		- Key of the system property that should specify the root directory of
		this - web app. Applied by WebAppRootListener or Log4jConfigListener.
	-->
	<context-param>
		<param-name>webAppRootKey</param-name>
		<param-value>klink.root</param-value>
	</context-param>

	<!--
		- Location of the Log4J config file, for initialization and refresh
		checks. - Applied by Log4jConfigListener.
	-->
	<context-param>
		<param-name>log4jConfigLocation</param-name>
		<param-value>/WEB-INF/log4j.properties</param-value>
	</context-param>
	
	<!--
		- Configures Log4J for this web app. - As this context specifies a
		context-param "log4jConfigLocation", its file path - is used to load
		the Log4J configuration, including periodic refresh checks. - - Would
		fall back to default Log4J initialization (non-refreshing) if no
		special - context-params are given. - - Exports a "web app root key",
		i.e. a system property that specifies the root - directory of this web
		app, for usage in log file paths. - This web app specifies
		"petclinic.root" (see log4j.properties file).
	-->
	<!-- Leave the listener commented-out if using JBoss -->
	<!--<listener>
		<listener-class>org.springframework.web.util.Log4jConfigListener</listener-class>
	</listener>
	
	--><!--
		- Loads the root application context of this web app at startup, - by
		default from "/WEB-INF/applicationContext.xml". - Note that it is
		preferable to use ContextLoaderListener in a servlet container - that
		follows the Servlet 2.4 initialization order (many Servlet 2.3
		containers do). - - Use
		WebApplicationContextUtils.getWebApplicationContext(servletContext) -
		to access it anywhere in the web application, outside of the
		framework. - - The root context is the parent of all servlet-specific
		contexts. - This means that its beans are automatically available in
		these child contexts, - both for getBean(name) calls and (external)
		bean references.
	-->
	<servlet>
		<servlet-name>context</servlet-name>
		<servlet-class>org.springframework.web.context.ContextLoaderServlet</servlet-class>
		<load-on-startup>1</load-on-startup>
	</servlet>
	<!--
		- Servlet that dispatches request to registered handlers (Controller
		implementations). - Has its own application context, by default
		defined in "{servlet-name}-servlet.xml", - i.e.
		"petclinic-servlet.xml". - - A web app can contain any number of such
		servlets. - Note that this web app has a shared root application
		context, serving as parent - of all DispatcherServlet contexts.
	-->
	<servlet>
		<servlet-name>dispatcher</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<load-on-startup>2</load-on-startup>
	</servlet>
	
		<servlet-mapping>
		<servlet-name>dispatcher</servlet-name>
		<url-pattern>*.htm</url-pattern>
	</servlet-mapping>
	
	<welcome-file-list>
		<welcome-file>index.jsp</welcome-file>
	</welcome-file-list>
</web-app>